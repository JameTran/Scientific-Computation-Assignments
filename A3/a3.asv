function a3

format long

a = midpoint(10);
b = erf(1);
c = trapezoid(10);
d = simpson(10);

h_values = zeros(1,10);
midpoint_errors = zeros(1, 10);
trap_errors = zeros(1, 10);
simp_errors = zeros (1, 10);

for i = 1:10
    midpoint_errors(i) = abs(midpoint(i) - erf(1));
    trap_errors(i) = abs(trapezoid(i) - erf(1));
    simp_errors(i) = abs(simpson(i) - erf(1));
    h_values(i) = 1/(2^(i));
end

loglog(midpoint_errors, h_values)
hold on
loglog(trap_errors, h_values)
loglog(simp_errors, h_values)
hold off



function c = midpoint(i)
h = 1/(2^(i));
n = (1 - 0)/h;
sum = 0;
    for j = 1:n
        sum = sum + uwu((j - (1/2))*h);
    end
c = sum*h;

end

function c = trapezoid(i)
h = 1/(2^(i));
n = (1 - 0)/h;
t_values = zeros(1, n+1);
    for i = 0:n
        t = 0 + i*h;
        t_values(i+1) = t;
    end 
sum = 0;
    for i = 2:n
        sum = sum + uwu(t_values(i));
    end

c = h/2 * (uwu(0) + uwu(1)) + h*sum;
end

function c = simpson(i)
h = 1/(2^(i));
n = (1 - 0)/h;
t_values = zeros(1, n+1);
    for i = 0:n
        t = 0 + i*h;
        t_values(i+1) = t;
    end 

sum_even = 0;
    for i = 1:((n/2) - 1)
        c_even = t_values(2*i + 1);
        sum_even = sum_even + uwu(c_even);
    end
 
sum_odd = 0;
    for i = 1:(n/2)
        c_odd = t_values(2*i);
        sum_odd = sum_odd + uwu(c_odd);
    end

c = (h/3) * (uwu(0) + 2*sum_even + 4*sum_odd + uwu(1));

end

function c = uwu(x)
c = (2/(sqrt(pi)))*exp(-x^(2));


end
end